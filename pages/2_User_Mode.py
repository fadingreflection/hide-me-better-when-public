import streamlit as st
import pandas as pd
import numpy as np
from Predictor import Predictor as Predictor_
import sys
sys.tracebacklimit=0
import warnings
warnings.filterwarnings("ignore")
from streamlit_extras.stateful_button import button as stbutton


df_mts=pd.read_csv('venues_mts.csv').dropna()
df_approved=pd.read_csv('df_orgs.csv')

# _predictor1=Predictor_(df_mts)
# _predictor2=Predictor_(df_approved)

CUTOFF=0.5    
    
def initial_set_page():
    st.set_page_config( 
        
        page_title="User Mode",
        page_icon="‚ôø",
        layout="wide",
    )
    st.image('mts_logo.jpg', caption=[''], width=200)
    
    st.title(':red[LIVE –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü]')

    st.header("")
    st.subheader(':black[–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–ª–æ—â–∞–¥–∫–∞]')
    
initial_set_page()



# @st.cache_data
# def find_most_similar(_predictor_instance, target):
#     indexes, res, distance =_predictor_instance.find_matches(target)
#     return indexes, res, distance

@st.cache_data
def find_most_similar(df, target):
    predictor_instance=Predictor_(df, target)
    indexes, res,distance=predictor_instance.find_matches()
    return indexes, res, distance




col1,col2,col3,col4= st.columns([1,1,1,1])


selected_site=col1.text_input('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏', max_chars=50)
selected_city=col2.text_input('–ì–æ—Ä–æ–¥', '–ú–æ—Å–∫–≤–∞')
selected_street=col3.text_input('–£–ª–∏—Ü–∞', max_chars=50)
selected_building=col4.text_input('–î–æ–º', max_chars=10)
selected_site=selected_site.title()
selected_street=selected_street.title()

venue=selected_site + ' ' + selected_city + ' ' + selected_street + ' ' + selected_building
st.write('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–æ—â–∞–¥–∫—É:', venue)


  
if not selected_site or not selected_street or not selected_building:
    st.write(':red[–ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏, —É–ª–∏—Ü–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞]')

else:
    button=st.button('–ò—Å–∫–∞—Ç—å', key='primary_search')
    if button:
        indexes, res, distance=find_most_similar(df_mts, venue)  
        # indexes, res, distance=find_most_similar(_predictor1, venue)  
        mts_venue_found=res.values[0]
        if distance>CUTOFF:
            st.write('\n')
            st.write(':red[–î–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ]')
            st.session_state.button = False
        else:
            st.write('–ù–∞ —Å–∞–π—Ç–µ –ú–¢–°-Live –Ω–∞–π–¥–µ–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:', mts_venue_found)
            st.session_state.mts_venue_found=mts_venue_found
            st.session_state.button = True

    if st.session_state.button:         
        checkbox= st.checkbox('–£–∑–Ω–∞—Ç—å –ø—Ä–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–æ—â–∞–¥–∫–∏')
        if checkbox:
            indexes, res, distance=find_most_similar(df_approved, st.session_state.mts_venue_found)
            # indexes, res, distance=find_most_similar(_predictor2, st.session_state.mts_venue_found)
            if distance>CUTOFF:
                st.write('\n')
                st.write(':red[–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤–µ–¥–µ–Ω–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏]')
            else:
                st.write('–ü–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞:  üè¶  ', res.values[0])
                st.write('–°–≤–µ–¥–µ–Ω–∏—è –æ –ø–ª–æ—â–∞–¥–∫–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ–µ—Å—Ç—Ä–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤', 'https://zhit-vmeste.ru/map/')
                df_temp=df_approved.drop(['Unnamed: 0', '–ê–¥—Ä–µ—Å', '–ù–∞–∑–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è', 'vector'], axis=1).loc[indexes]
                df_temp=df_temp.reset_index().drop('index', axis=1).T.rename({0:'–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞'}, axis=1)
                df_temp['–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞']=df_temp['–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞'].apply(lambda x: '‚úÖ   –¥–∞' if x==1 else '‚ùå   –Ω–µ—Ç')     
                df_temp.index.rename('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π', inplace=True)   

                st.write(df_temp)
                
